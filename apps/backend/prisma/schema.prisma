// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name role-added
//nxp prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Superadmin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("SUPER_ADMIN")
  createdAt DateTime @default(now())
}

model ChannelPartner {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("CHANNEL_PARTNER")
  createdAt DateTime @default(now())

  store  Store[]
  studio Studio[]
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String?
  createdAt DateTime @default(now())

  channelPartnerId Int            @unique
  channelPartner   ChannelPartner @relation(fields: [channelPartnerId], references: [id])

  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  category    String?
  price       String?
  image       String?
  link        String?
  slug        String?
  video       String?
  tag         String?
  createdAt   DateTime @default(now())
  lastUpdate  DateTime @updatedAt

  storeId Int
  store   Store @relation(fields: [storeId], references: [id])

  wishedByUsers user[] @relation("UserWishesProduct")
}

model Studio {
  id        Int      @id @default(autoincrement())
  name      String
  link      String?  @unique
  createdAt DateTime @default(now())

  channelPartnerId Int            @unique
  channelPartner   ChannelPartner @relation(fields: [channelPartnerId], references: [id])

  videos          Video[] 

}

model Video {
  id              Int       @id @default(autoincrement())
  title           String
  slug            String?   @unique
  category        String?
  categoryId      Int?
  thumbnailPath   String?
  filePath        String?   @unique
  status          String?   @default("Pending")
  tags            String?
  url             String?   @unique


  studioId        Int
  studio          Studio @relation(fields: [studioId], references: [id])

  createdAt   DateTime @default(now())
  lastUpdate  DateTime @updatedAt

}

model user {
  userId                Int     @id @default(autoincrement())
  userName              String
  userEmail             String  @unique
  userPassword          String
  userInterests         String?
  userWishlist          String?
  userAddress1          String?
  userAddress2          String?
  userCity              String?
  userState             String?
  userPincode           String?
  userCountry           String?
  userSubscribedStoreId Int?

  userWishedProducts Product[] @relation("UserWishesProduct")
}
